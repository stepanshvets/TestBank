/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 286.0, "minX": 0.0, "maxY": 5268.0, "series": [{"data": [[0.0, 286.0], [0.1, 323.0], [0.2, 324.0], [0.3, 324.0], [0.4, 358.0], [0.5, 377.0], [0.6, 428.0], [0.7, 432.0], [0.8, 442.0], [0.9, 451.0], [1.0, 452.0], [1.1, 454.0], [1.2, 457.0], [1.3, 458.0], [1.4, 458.0], [1.5, 459.0], [1.6, 460.0], [1.7, 460.0], [1.8, 471.0], [1.9, 474.0], [2.0, 482.0], [2.1, 483.0], [2.2, 493.0], [2.3, 495.0], [2.4, 495.0], [2.5, 496.0], [2.6, 500.0], [2.7, 508.0], [2.8, 514.0], [2.9, 519.0], [3.0, 520.0], [3.1, 524.0], [3.2, 526.0], [3.3, 529.0], [3.4, 530.0], [3.5, 531.0], [3.6, 544.0], [3.7, 545.0], [3.8, 551.0], [3.9, 551.0], [4.0, 552.0], [4.1, 552.0], [4.2, 554.0], [4.3, 555.0], [4.4, 558.0], [4.5, 571.0], [4.6, 578.0], [4.7, 749.0], [4.8, 749.0], [4.9, 749.0], [5.0, 774.0], [5.1, 812.0], [5.2, 812.0], [5.3, 865.0], [5.4, 875.0], [5.5, 879.0], [5.6, 905.0], [5.7, 942.0], [5.8, 943.0], [5.9, 947.0], [6.0, 960.0], [6.1, 968.0], [6.2, 971.0], [6.3, 985.0], [6.4, 987.0], [6.5, 995.0], [6.6, 997.0], [6.7, 999.0], [6.8, 1000.0], [6.9, 1000.0], [7.0, 1004.0], [7.1, 1015.0], [7.2, 1020.0], [7.3, 1022.0], [7.4, 1026.0], [7.5, 1035.0], [7.6, 1036.0], [7.7, 1045.0], [7.8, 1063.0], [7.9, 1065.0], [8.0, 1068.0], [8.1, 1073.0], [8.2, 1078.0], [8.3, 1088.0], [8.4, 1102.0], [8.5, 1119.0], [8.6, 1121.0], [8.7, 1123.0], [8.8, 1138.0], [8.9, 1143.0], [9.0, 1143.0], [9.1, 1144.0], [9.2, 1150.0], [9.3, 1154.0], [9.4, 1154.0], [9.5, 1168.0], [9.6, 1203.0], [9.7, 1222.0], [9.8, 1223.0], [9.9, 1226.0], [10.0, 1227.0], [10.1, 1232.0], [10.2, 1232.0], [10.3, 1239.0], [10.4, 1242.0], [10.5, 1249.0], [10.6, 1253.0], [10.7, 1265.0], [10.8, 1270.0], [10.9, 1271.0], [11.0, 1294.0], [11.1, 1297.0], [11.2, 1311.0], [11.3, 1313.0], [11.4, 1322.0], [11.5, 1325.0], [11.6, 1337.0], [11.7, 1343.0], [11.8, 1350.0], [11.9, 1353.0], [12.0, 1355.0], [12.1, 1360.0], [12.2, 1362.0], [12.3, 1363.0], [12.4, 1370.0], [12.5, 1372.0], [12.6, 1381.0], [12.7, 1381.0], [12.8, 1382.0], [12.9, 1392.0], [13.0, 1394.0], [13.1, 1395.0], [13.2, 1395.0], [13.3, 1396.0], [13.4, 1398.0], [13.5, 1399.0], [13.6, 1400.0], [13.7, 1404.0], [13.8, 1408.0], [13.9, 1410.0], [14.0, 1410.0], [14.1, 1411.0], [14.2, 1412.0], [14.3, 1415.0], [14.4, 1416.0], [14.5, 1417.0], [14.6, 1422.0], [14.7, 1426.0], [14.8, 1428.0], [14.9, 1434.0], [15.0, 1442.0], [15.1, 1442.0], [15.2, 1442.0], [15.3, 1446.0], [15.4, 1447.0], [15.5, 1452.0], [15.6, 1453.0], [15.7, 1460.0], [15.8, 1462.0], [15.9, 1463.0], [16.0, 1474.0], [16.1, 1478.0], [16.2, 1481.0], [16.3, 1483.0], [16.4, 1487.0], [16.5, 1487.0], [16.6, 1488.0], [16.7, 1495.0], [16.8, 1498.0], [16.9, 1499.0], [17.0, 1502.0], [17.1, 1505.0], [17.2, 1508.0], [17.3, 1510.0], [17.4, 1512.0], [17.5, 1517.0], [17.6, 1517.0], [17.7, 1521.0], [17.8, 1531.0], [17.9, 1533.0], [18.0, 1535.0], [18.1, 1538.0], [18.2, 1539.0], [18.3, 1540.0], [18.4, 1540.0], [18.5, 1542.0], [18.6, 1543.0], [18.7, 1549.0], [18.8, 1552.0], [18.9, 1556.0], [19.0, 1558.0], [19.1, 1563.0], [19.2, 1564.0], [19.3, 1564.0], [19.4, 1565.0], [19.5, 1570.0], [19.6, 1570.0], [19.7, 1573.0], [19.8, 1575.0], [19.9, 1575.0], [20.0, 1579.0], [20.1, 1587.0], [20.2, 1591.0], [20.3, 1591.0], [20.4, 1593.0], [20.5, 1594.0], [20.6, 1596.0], [20.7, 1602.0], [20.8, 1604.0], [20.9, 1607.0], [21.0, 1613.0], [21.1, 1615.0], [21.2, 1616.0], [21.3, 1617.0], [21.4, 1619.0], [21.5, 1630.0], [21.6, 1633.0], [21.7, 1633.0], [21.8, 1635.0], [21.9, 1642.0], [22.0, 1653.0], [22.1, 1660.0], [22.2, 1661.0], [22.3, 1662.0], [22.4, 1667.0], [22.5, 1669.0], [22.6, 1671.0], [22.7, 1676.0], [22.8, 1677.0], [22.9, 1679.0], [23.0, 1680.0], [23.1, 1683.0], [23.2, 1687.0], [23.3, 1691.0], [23.4, 1703.0], [23.5, 1705.0], [23.6, 1705.0], [23.7, 1712.0], [23.8, 1714.0], [23.9, 1719.0], [24.0, 1722.0], [24.1, 1722.0], [24.2, 1726.0], [24.3, 1730.0], [24.4, 1731.0], [24.5, 1734.0], [24.6, 1735.0], [24.7, 1742.0], [24.8, 1753.0], [24.9, 1753.0], [25.0, 1755.0], [25.1, 1758.0], [25.2, 1758.0], [25.3, 1762.0], [25.4, 1764.0], [25.5, 1764.0], [25.6, 1767.0], [25.7, 1770.0], [25.8, 1772.0], [25.9, 1778.0], [26.0, 1780.0], [26.1, 1781.0], [26.2, 1781.0], [26.3, 1783.0], [26.4, 1783.0], [26.5, 1784.0], [26.6, 1785.0], [26.7, 1786.0], [26.8, 1787.0], [26.9, 1795.0], [27.0, 1800.0], [27.1, 1801.0], [27.2, 1805.0], [27.3, 1808.0], [27.4, 1810.0], [27.5, 1810.0], [27.6, 1811.0], [27.7, 1811.0], [27.8, 1814.0], [27.9, 1815.0], [28.0, 1816.0], [28.1, 1821.0], [28.2, 1822.0], [28.3, 1829.0], [28.4, 1830.0], [28.5, 1832.0], [28.6, 1836.0], [28.7, 1839.0], [28.8, 1840.0], [28.9, 1842.0], [29.0, 1842.0], [29.1, 1845.0], [29.2, 1848.0], [29.3, 1848.0], [29.4, 1850.0], [29.5, 1861.0], [29.6, 1863.0], [29.7, 1870.0], [29.8, 1872.0], [29.9, 1873.0], [30.0, 1877.0], [30.1, 1878.0], [30.2, 1879.0], [30.3, 1879.0], [30.4, 1882.0], [30.5, 1884.0], [30.6, 1885.0], [30.7, 1886.0], [30.8, 1887.0], [30.9, 1890.0], [31.0, 1894.0], [31.1, 1894.0], [31.2, 1895.0], [31.3, 1897.0], [31.4, 1900.0], [31.5, 1900.0], [31.6, 1901.0], [31.7, 1901.0], [31.8, 1901.0], [31.9, 1911.0], [32.0, 1912.0], [32.1, 1914.0], [32.2, 1918.0], [32.3, 1919.0], [32.4, 1920.0], [32.5, 1920.0], [32.6, 1921.0], [32.7, 1921.0], [32.8, 1921.0], [32.9, 1922.0], [33.0, 1930.0], [33.1, 1933.0], [33.2, 1949.0], [33.3, 1956.0], [33.4, 1957.0], [33.5, 1957.0], [33.6, 1961.0], [33.7, 1962.0], [33.8, 1963.0], [33.9, 1965.0], [34.0, 1967.0], [34.1, 1970.0], [34.2, 1971.0], [34.3, 1971.0], [34.4, 1973.0], [34.5, 1974.0], [34.6, 1975.0], [34.7, 1976.0], [34.8, 1976.0], [34.9, 1977.0], [35.0, 1979.0], [35.1, 1979.0], [35.2, 1983.0], [35.3, 1990.0], [35.4, 1993.0], [35.5, 1993.0], [35.6, 1998.0], [35.7, 1999.0], [35.8, 2001.0], [35.9, 2007.0], [36.0, 2009.0], [36.1, 2014.0], [36.2, 2015.0], [36.3, 2021.0], [36.4, 2031.0], [36.5, 2032.0], [36.6, 2037.0], [36.7, 2038.0], [36.8, 2040.0], [36.9, 2044.0], [37.0, 2049.0], [37.1, 2053.0], [37.2, 2054.0], [37.3, 2054.0], [37.4, 2055.0], [37.5, 2059.0], [37.6, 2066.0], [37.7, 2069.0], [37.8, 2073.0], [37.9, 2077.0], [38.0, 2079.0], [38.1, 2080.0], [38.2, 2081.0], [38.3, 2083.0], [38.4, 2086.0], [38.5, 2092.0], [38.6, 2092.0], [38.7, 2095.0], [38.8, 2096.0], [38.9, 2097.0], [39.0, 2097.0], [39.1, 2100.0], [39.2, 2103.0], [39.3, 2108.0], [39.4, 2109.0], [39.5, 2115.0], [39.6, 2115.0], [39.7, 2116.0], [39.8, 2129.0], [39.9, 2132.0], [40.0, 2133.0], [40.1, 2141.0], [40.2, 2151.0], [40.3, 2152.0], [40.4, 2153.0], [40.5, 2155.0], [40.6, 2157.0], [40.7, 2157.0], [40.8, 2159.0], [40.9, 2171.0], [41.0, 2174.0], [41.1, 2184.0], [41.2, 2189.0], [41.3, 2189.0], [41.4, 2190.0], [41.5, 2190.0], [41.6, 2201.0], [41.7, 2204.0], [41.8, 2205.0], [41.9, 2205.0], [42.0, 2206.0], [42.1, 2208.0], [42.2, 2210.0], [42.3, 2214.0], [42.4, 2215.0], [42.5, 2216.0], [42.6, 2217.0], [42.7, 2221.0], [42.8, 2221.0], [42.9, 2222.0], [43.0, 2226.0], [43.1, 2228.0], [43.2, 2234.0], [43.3, 2235.0], [43.4, 2242.0], [43.5, 2246.0], [43.6, 2246.0], [43.7, 2250.0], [43.8, 2250.0], [43.9, 2254.0], [44.0, 2256.0], [44.1, 2257.0], [44.2, 2259.0], [44.3, 2263.0], [44.4, 2264.0], [44.5, 2265.0], [44.6, 2266.0], [44.7, 2267.0], [44.8, 2272.0], [44.9, 2273.0], [45.0, 2273.0], [45.1, 2276.0], [45.2, 2277.0], [45.3, 2279.0], [45.4, 2281.0], [45.5, 2283.0], [45.6, 2284.0], [45.7, 2284.0], [45.8, 2291.0], [45.9, 2294.0], [46.0, 2296.0], [46.1, 2296.0], [46.2, 2297.0], [46.3, 2298.0], [46.4, 2299.0], [46.5, 2300.0], [46.6, 2300.0], [46.7, 2301.0], [46.8, 2303.0], [46.9, 2305.0], [47.0, 2308.0], [47.1, 2309.0], [47.2, 2314.0], [47.3, 2318.0], [47.4, 2320.0], [47.5, 2325.0], [47.6, 2327.0], [47.7, 2328.0], [47.8, 2329.0], [47.9, 2332.0], [48.0, 2341.0], [48.1, 2343.0], [48.2, 2351.0], [48.3, 2356.0], [48.4, 2356.0], [48.5, 2356.0], [48.6, 2357.0], [48.7, 2358.0], [48.8, 2362.0], [48.9, 2362.0], [49.0, 2363.0], [49.1, 2364.0], [49.2, 2366.0], [49.3, 2366.0], [49.4, 2378.0], [49.5, 2380.0], [49.6, 2389.0], [49.7, 2394.0], [49.8, 2399.0], [49.9, 2401.0], [50.0, 2410.0], [50.1, 2412.0], [50.2, 2415.0], [50.3, 2416.0], [50.4, 2421.0], [50.5, 2439.0], [50.6, 2443.0], [50.7, 2445.0], [50.8, 2446.0], [50.9, 2453.0], [51.0, 2469.0], [51.1, 2474.0], [51.2, 2474.0], [51.3, 2482.0], [51.4, 2486.0], [51.5, 2495.0], [51.6, 2496.0], [51.7, 2504.0], [51.8, 2508.0], [51.9, 2522.0], [52.0, 2523.0], [52.1, 2529.0], [52.2, 2531.0], [52.3, 2536.0], [52.4, 2556.0], [52.5, 2561.0], [52.6, 2562.0], [52.7, 2570.0], [52.8, 2571.0], [52.9, 2571.0], [53.0, 2574.0], [53.1, 2578.0], [53.2, 2579.0], [53.3, 2600.0], [53.4, 2602.0], [53.5, 2603.0], [53.6, 2604.0], [53.7, 2604.0], [53.8, 2605.0], [53.9, 2617.0], [54.0, 2641.0], [54.1, 2657.0], [54.2, 2667.0], [54.3, 2677.0], [54.4, 2684.0], [54.5, 2701.0], [54.6, 2704.0], [54.7, 2705.0], [54.8, 2715.0], [54.9, 2718.0], [55.0, 2725.0], [55.1, 2727.0], [55.2, 2732.0], [55.3, 2734.0], [55.4, 2741.0], [55.5, 2743.0], [55.6, 2746.0], [55.7, 2751.0], [55.8, 2754.0], [55.9, 2764.0], [56.0, 2769.0], [56.1, 2773.0], [56.2, 2776.0], [56.3, 2784.0], [56.4, 2786.0], [56.5, 2795.0], [56.6, 2801.0], [56.7, 2803.0], [56.8, 2814.0], [56.9, 2834.0], [57.0, 2835.0], [57.1, 2843.0], [57.2, 2844.0], [57.3, 2856.0], [57.4, 2859.0], [57.5, 2861.0], [57.6, 2862.0], [57.7, 2864.0], [57.8, 2867.0], [57.9, 2876.0], [58.0, 2890.0], [58.1, 2894.0], [58.2, 2896.0], [58.3, 2897.0], [58.4, 2901.0], [58.5, 2915.0], [58.6, 2920.0], [58.7, 2922.0], [58.8, 2924.0], [58.9, 2925.0], [59.0, 2935.0], [59.1, 2944.0], [59.2, 2964.0], [59.3, 2970.0], [59.4, 2982.0], [59.5, 2990.0], [59.6, 2992.0], [59.7, 2993.0], [59.8, 2994.0], [59.9, 2997.0], [60.0, 3019.0], [60.1, 3022.0], [60.2, 3030.0], [60.3, 3039.0], [60.4, 3056.0], [60.5, 3060.0], [60.6, 3062.0], [60.7, 3071.0], [60.8, 3074.0], [60.9, 3088.0], [61.0, 3097.0], [61.1, 3106.0], [61.2, 3113.0], [61.3, 3117.0], [61.4, 3120.0], [61.5, 3122.0], [61.6, 3123.0], [61.7, 3124.0], [61.8, 3130.0], [61.9, 3133.0], [62.0, 3142.0], [62.1, 3149.0], [62.2, 3156.0], [62.3, 3160.0], [62.4, 3163.0], [62.5, 3175.0], [62.6, 3179.0], [62.7, 3181.0], [62.8, 3192.0], [62.9, 3193.0], [63.0, 3200.0], [63.1, 3211.0], [63.2, 3214.0], [63.3, 3217.0], [63.4, 3221.0], [63.5, 3222.0], [63.6, 3232.0], [63.7, 3242.0], [63.8, 3252.0], [63.9, 3273.0], [64.0, 3273.0], [64.1, 3274.0], [64.2, 3275.0], [64.3, 3278.0], [64.4, 3281.0], [64.5, 3281.0], [64.6, 3284.0], [64.7, 3287.0], [64.8, 3298.0], [64.9, 3299.0], [65.0, 3304.0], [65.1, 3307.0], [65.2, 3310.0], [65.3, 3327.0], [65.4, 3329.0], [65.5, 3337.0], [65.6, 3338.0], [65.7, 3338.0], [65.8, 3346.0], [65.9, 3347.0], [66.0, 3360.0], [66.1, 3372.0], [66.2, 3374.0], [66.3, 3379.0], [66.4, 3381.0], [66.5, 3381.0], [66.6, 3386.0], [66.7, 3393.0], [66.8, 3396.0], [66.9, 3401.0], [67.0, 3407.0], [67.1, 3408.0], [67.2, 3417.0], [67.3, 3422.0], [67.4, 3428.0], [67.5, 3442.0], [67.6, 3449.0], [67.7, 3466.0], [67.8, 3478.0], [67.9, 3478.0], [68.0, 3498.0], [68.1, 3501.0], [68.2, 3502.0], [68.3, 3503.0], [68.4, 3506.0], [68.5, 3506.0], [68.6, 3512.0], [68.7, 3514.0], [68.8, 3516.0], [68.9, 3517.0], [69.0, 3520.0], [69.1, 3522.0], [69.2, 3530.0], [69.3, 3531.0], [69.4, 3533.0], [69.5, 3537.0], [69.6, 3546.0], [69.7, 3547.0], [69.8, 3547.0], [69.9, 3550.0], [70.0, 3553.0], [70.1, 3554.0], [70.2, 3571.0], [70.3, 3572.0], [70.4, 3583.0], [70.5, 3592.0], [70.6, 3595.0], [70.7, 3601.0], [70.8, 3636.0], [70.9, 3642.0], [71.0, 3649.0], [71.1, 3658.0], [71.2, 3658.0], [71.3, 3660.0], [71.4, 3662.0], [71.5, 3668.0], [71.6, 3675.0], [71.7, 3680.0], [71.8, 3682.0], [71.9, 3684.0], [72.0, 3687.0], [72.1, 3692.0], [72.2, 3700.0], [72.3, 3702.0], [72.4, 3710.0], [72.5, 3713.0], [72.6, 3721.0], [72.7, 3724.0], [72.8, 3735.0], [72.9, 3745.0], [73.0, 3763.0], [73.1, 3766.0], [73.2, 3772.0], [73.3, 3774.0], [73.4, 3775.0], [73.5, 3776.0], [73.6, 3784.0], [73.7, 3784.0], [73.8, 3790.0], [73.9, 3793.0], [74.0, 3799.0], [74.1, 3807.0], [74.2, 3812.0], [74.3, 3813.0], [74.4, 3824.0], [74.5, 3825.0], [74.6, 3825.0], [74.7, 3829.0], [74.8, 3834.0], [74.9, 3843.0], [75.0, 3854.0], [75.1, 3857.0], [75.2, 3861.0], [75.3, 3875.0], [75.4, 3875.0], [75.5, 3876.0], [75.6, 3886.0], [75.7, 3887.0], [75.8, 3894.0], [75.9, 3896.0], [76.0, 3908.0], [76.1, 3911.0], [76.2, 3915.0], [76.3, 3915.0], [76.4, 3918.0], [76.5, 3925.0], [76.6, 3925.0], [76.7, 3928.0], [76.8, 3934.0], [76.9, 3945.0], [77.0, 3956.0], [77.1, 3967.0], [77.2, 3972.0], [77.3, 3979.0], [77.4, 3983.0], [77.5, 3986.0], [77.6, 3990.0], [77.7, 3990.0], [77.8, 4004.0], [77.9, 4017.0], [78.0, 4020.0], [78.1, 4022.0], [78.2, 4025.0], [78.3, 4031.0], [78.4, 4037.0], [78.5, 4037.0], [78.6, 4047.0], [78.7, 4049.0], [78.8, 4050.0], [78.9, 4051.0], [79.0, 4054.0], [79.1, 4060.0], [79.2, 4063.0], [79.3, 4066.0], [79.4, 4073.0], [79.5, 4079.0], [79.6, 4080.0], [79.7, 4083.0], [79.8, 4087.0], [79.9, 4089.0], [80.0, 4092.0], [80.1, 4099.0], [80.2, 4101.0], [80.3, 4114.0], [80.4, 4117.0], [80.5, 4118.0], [80.6, 4122.0], [80.7, 4123.0], [80.8, 4125.0], [80.9, 4136.0], [81.0, 4138.0], [81.1, 4139.0], [81.2, 4151.0], [81.3, 4151.0], [81.4, 4154.0], [81.5, 4154.0], [81.6, 4159.0], [81.7, 4160.0], [81.8, 4166.0], [81.9, 4175.0], [82.0, 4193.0], [82.1, 4201.0], [82.2, 4206.0], [82.3, 4206.0], [82.4, 4217.0], [82.5, 4219.0], [82.6, 4231.0], [82.7, 4231.0], [82.8, 4241.0], [82.9, 4242.0], [83.0, 4249.0], [83.1, 4250.0], [83.2, 4256.0], [83.3, 4257.0], [83.4, 4262.0], [83.5, 4271.0], [83.6, 4279.0], [83.7, 4280.0], [83.8, 4282.0], [83.9, 4303.0], [84.0, 4306.0], [84.1, 4308.0], [84.2, 4325.0], [84.3, 4330.0], [84.4, 4344.0], [84.5, 4345.0], [84.6, 4346.0], [84.7, 4348.0], [84.8, 4348.0], [84.9, 4350.0], [85.0, 4355.0], [85.1, 4358.0], [85.2, 4363.0], [85.3, 4366.0], [85.4, 4380.0], [85.5, 4391.0], [85.6, 4392.0], [85.7, 4395.0], [85.8, 4407.0], [85.9, 4408.0], [86.0, 4428.0], [86.1, 4436.0], [86.2, 4437.0], [86.3, 4438.0], [86.4, 4442.0], [86.5, 4443.0], [86.6, 4452.0], [86.7, 4453.0], [86.8, 4457.0], [86.9, 4466.0], [87.0, 4468.0], [87.1, 4473.0], [87.2, 4495.0], [87.3, 4497.0], [87.4, 4508.0], [87.5, 4517.0], [87.6, 4519.0], [87.7, 4523.0], [87.8, 4531.0], [87.9, 4535.0], [88.0, 4544.0], [88.1, 4564.0], [88.2, 4566.0], [88.3, 4568.0], [88.4, 4573.0], [88.5, 4587.0], [88.6, 4598.0], [88.7, 4600.0], [88.8, 4621.0], [88.9, 4627.0], [89.0, 4634.0], [89.1, 4658.0], [89.2, 4658.0], [89.3, 4668.0], [89.4, 4673.0], [89.5, 4681.0], [89.6, 4681.0], [89.7, 4683.0], [89.8, 4686.0], [89.9, 4689.0], [90.0, 4694.0], [90.1, 4702.0], [90.2, 4713.0], [90.3, 4714.0], [90.4, 4714.0], [90.5, 4722.0], [90.6, 4724.0], [90.7, 4724.0], [90.8, 4734.0], [90.9, 4739.0], [91.0, 4740.0], [91.1, 4751.0], [91.2, 4754.0], [91.3, 4758.0], [91.4, 4761.0], [91.5, 4764.0], [91.6, 4766.0], [91.7, 4767.0], [91.8, 4770.0], [91.9, 4784.0], [92.0, 4784.0], [92.1, 4790.0], [92.2, 4791.0], [92.3, 4801.0], [92.4, 4804.0], [92.5, 4806.0], [92.6, 4812.0], [92.7, 4812.0], [92.8, 4821.0], [92.9, 4865.0], [93.0, 4873.0], [93.1, 4889.0], [93.2, 4892.0], [93.3, 4893.0], [93.4, 4896.0], [93.5, 4897.0], [93.6, 4898.0], [93.7, 4903.0], [93.8, 4906.0], [93.9, 4906.0], [94.0, 4911.0], [94.1, 4911.0], [94.2, 4919.0], [94.3, 4919.0], [94.4, 4931.0], [94.5, 4931.0], [94.6, 4935.0], [94.7, 4947.0], [94.8, 4953.0], [94.9, 4959.0], [95.0, 4960.0], [95.1, 4960.0], [95.2, 4965.0], [95.3, 4972.0], [95.4, 4972.0], [95.5, 4979.0], [95.6, 4985.0], [95.7, 4991.0], [95.8, 4994.0], [95.9, 4999.0], [96.0, 5010.0], [96.1, 5029.0], [96.2, 5032.0], [96.3, 5056.0], [96.4, 5057.0], [96.5, 5057.0], [96.6, 5060.0], [96.7, 5066.0], [96.8, 5069.0], [96.9, 5071.0], [97.0, 5075.0], [97.1, 5079.0], [97.2, 5085.0], [97.3, 5085.0], [97.4, 5092.0], [97.5, 5098.0], [97.6, 5104.0], [97.7, 5108.0], [97.8, 5116.0], [97.9, 5128.0], [98.0, 5128.0], [98.1, 5132.0], [98.2, 5142.0], [98.3, 5146.0], [98.4, 5160.0], [98.5, 5163.0], [98.6, 5170.0], [98.7, 5175.0], [98.8, 5178.0], [98.9, 5189.0], [99.0, 5191.0], [99.1, 5197.0], [99.2, 5201.0], [99.3, 5208.0], [99.4, 5209.0], [99.5, 5240.0], [99.6, 5240.0], [99.7, 5246.0], [99.8, 5264.0], [99.9, 5268.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 49.0, "series": [{"data": [[700.0, 4.0], [800.0, 5.0], [900.0, 12.0], [1000.0, 16.0], [1100.0, 12.0], [1200.0, 16.0], [1300.0, 24.0], [1400.0, 34.0], [1500.0, 36.0], [1600.0, 27.0], [1700.0, 36.0], [1800.0, 44.0], [1900.0, 44.0], [2000.0, 33.0], [2100.0, 25.0], [2200.0, 49.0], [2300.0, 34.0], [2400.0, 18.0], [2500.0, 16.0], [2600.0, 12.0], [2700.0, 21.0], [2800.0, 18.0], [2900.0, 16.0], [3000.0, 11.0], [3100.0, 19.0], [3200.0, 20.0], [3300.0, 19.0], [3400.0, 12.0], [3500.0, 26.0], [3600.0, 15.0], [3700.0, 19.0], [3800.0, 19.0], [3900.0, 19.0], [4000.0, 24.0], [4100.0, 19.0], [4200.0, 18.0], [4300.0, 19.0], [4400.0, 16.0], [4500.0, 13.0], [4600.0, 14.0], [4700.0, 22.0], [4800.0, 14.0], [4900.0, 23.0], [5000.0, 16.0], [5100.0, 16.0], [5200.0, 8.0], [200.0, 1.0], [300.0, 5.0], [400.0, 19.0], [500.0, 22.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 78.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 578.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 78.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 578.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 344.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 502.2580000000003, "minX": 1.73971248E12, "maxY": 502.2580000000003, "series": [{"data": [[1.73971248E12, 502.2580000000003]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73971248E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 483.70212765957444, "minX": 1.0, "maxY": 5268.0, "series": [{"data": [[2.0, 5057.0], [3.0, 5246.0], [4.0, 5240.0], [5.0, 5264.0], [6.0, 5268.0], [7.0, 5170.0], [8.0, 5208.0], [9.0, 5209.0], [10.0, 5197.0], [11.0, 5240.0], [12.0, 5146.0], [13.0, 5142.0], [14.0, 5175.0], [15.0, 5128.0], [16.0, 5178.0], [17.0, 4960.0], [18.0, 5163.0], [19.0, 5191.0], [20.0, 5092.0], [21.0, 5160.0], [22.0, 5189.0], [23.0, 5079.0], [24.0, 5116.0], [25.0, 5128.0], [26.0, 5104.0], [27.0, 5098.0], [28.0, 5108.0], [29.0, 5132.0], [30.0, 5085.0], [31.0, 4893.0], [33.0, 5075.0], [32.0, 4991.0], [35.0, 5029.0], [34.0, 4931.0], [37.0, 5010.0], [36.0, 5069.0], [39.0, 5057.0], [38.0, 5085.0], [41.0, 4994.0], [40.0, 4906.0], [43.0, 5071.0], [42.0, 5066.0], [45.0, 4972.0], [44.0, 5056.0], [47.0, 5060.0], [46.0, 4965.0], [49.0, 4898.0], [48.0, 4947.0], [51.0, 4979.0], [50.0, 4999.0], [53.0, 4892.0], [52.0, 5032.0], [55.0, 4919.0], [54.0, 4935.0], [57.0, 4959.0], [56.0, 4906.0], [59.0, 4911.0], [58.0, 4985.0], [61.0, 4972.0], [60.0, 4960.0], [63.0, 4953.0], [62.0, 4865.0], [67.0, 4911.0], [66.0, 4740.0], [65.0, 4897.0], [64.0, 4903.0], [71.0, 4821.0], [70.0, 4931.0], [69.0, 4919.0], [68.0, 4896.0], [75.0, 4889.0], [74.0, 4873.0], [73.0, 4812.0], [72.0, 4812.0], [79.0, 4694.0], [78.0, 4587.0], [77.0, 4784.0], [76.0, 4790.0], [83.0, 4758.0], [82.0, 4801.0], [81.0, 4751.0], [80.0, 4764.0], [87.0, 4766.0], [86.0, 4658.0], [85.0, 4806.0], [84.0, 4804.0], [91.0, 4784.0], [90.0, 4770.0], [89.0, 4722.0], [88.0, 4791.0], [95.0, 4681.0], [94.0, 4761.0], [93.0, 4686.0], [92.0, 4754.0], [99.0, 4729.0], [97.0, 4714.0], [96.0, 4767.0], [103.0, 4739.0], [102.0, 4724.0], [101.0, 4566.0], [100.0, 4713.0], [107.0, 4568.0], [106.0, 4683.0], [105.0, 4627.0], [104.0, 4702.0], [111.0, 4634.0], [110.0, 4535.0], [109.0, 4689.0], [108.0, 4714.0], [115.0, 4437.0], [114.0, 4658.0], [113.0, 4668.0], [112.0, 4681.0], [119.0, 4358.0], [118.0, 4564.0], [117.0, 4438.0], [116.0, 4673.0], [123.0, 4621.0], [122.0, 4392.0], [121.0, 4544.0], [120.0, 4598.0], [127.0, 4508.0], [126.0, 4600.0], [125.0, 4436.0], [124.0, 4330.0], [135.0, 4443.0], [134.0, 4519.0], [133.0, 4473.0], [132.0, 4517.0], [131.0, 4466.0], [130.0, 4468.0], [129.0, 4573.0], [128.0, 4523.0], [143.0, 4453.0], [142.0, 4495.0], [141.0, 4442.0], [140.0, 4306.0], [139.0, 4271.0], [138.0, 4457.0], [137.0, 4531.0], [136.0, 4497.0], [151.0, 4344.0], [150.0, 4217.0], [149.0, 4159.0], [148.0, 4249.0], [147.0, 4363.0], [146.0, 4452.0], [145.0, 4395.0], [144.0, 4428.0], [159.0, 4348.0], [158.0, 4380.0], [157.0, 4151.0], [156.0, 4407.0], [155.0, 4355.0], [154.0, 4408.0], [153.0, 4391.0], [152.0, 4366.0], [167.0, 4303.0], [166.0, 4308.0], [165.0, 4346.0], [164.0, 4350.0], [163.0, 4280.0], [162.0, 4089.0], [161.0, 4249.5], [175.0, 4279.0], [174.0, 4231.0], [173.0, 4118.0], [172.0, 4325.0], [171.0, 4262.0], [170.0, 4050.0], [169.0, 4345.0], [168.0, 4256.0], [183.0, 4241.0], [182.0, 4250.0], [181.0, 4154.0], [180.0, 4063.0], [179.0, 3990.0], [178.0, 4201.0], [177.0, 4257.0], [176.0, 4282.0], [191.0, 4123.0], [190.0, 4160.0], [189.0, 4193.0], [188.0, 4231.0], [187.0, 4242.0], [186.0, 4219.0], [185.0, 4206.0], [184.0, 4117.0], [199.0, 4060.0], [198.0, 4092.0], [197.0, 4139.0], [196.0, 4154.0], [195.0, 4206.0], [194.0, 4079.0], [193.0, 4114.0], [192.0, 4017.0], [206.0, 4099.0], [205.0, 4138.0], [204.0, 4125.0], [203.0, 4166.0], [202.0, 4080.0], [201.0, 4136.0], [200.0, 4175.0], [215.0, 4087.0], [214.0, 3887.0], [213.0, 4020.0], [212.0, 3875.0], [211.0, 4083.0], [210.0, 4073.0], [209.0, 4122.0], [208.0, 4077.5], [223.0, 4031.0], [222.0, 4051.0], [221.0, 4066.0], [220.0, 3990.0], [219.0, 4047.0], [218.0, 4037.0], [217.0, 4049.0], [216.0, 4004.0], [231.0, 3972.0], [230.0, 3799.0], [229.0, 4025.0], [228.0, 3979.0], [227.0, 4037.0], [226.0, 3915.0], [225.0, 3807.0], [224.0, 3967.0], [239.0, 3956.0], [238.0, 3983.0], [237.0, 3912.0], [236.0, 3945.0], [235.0, 3911.0], [234.0, 3896.0], [233.0, 4022.0], [232.0, 3986.0], [247.0, 3784.0], [246.0, 3928.0], [245.0, 3759.5], [243.0, 3934.0], [242.0, 3908.0], [241.0, 3763.0], [240.0, 3918.0], [255.0, 3876.0], [254.0, 3687.0], [253.0, 3829.0], [252.0, 3894.0], [251.0, 3824.0], [250.0, 3915.0], [249.0, 3925.0], [248.0, 3925.0], [270.0, 3713.0], [271.0, 3710.0], [269.0, 3724.0], [268.0, 3825.0], [267.0, 3784.0], [266.0, 3735.0], [265.0, 3812.0], [264.0, 3774.0], [263.0, 3857.0], [257.0, 3813.0], [256.0, 3886.0], [259.0, 3834.0], [258.0, 3875.0], [262.0, 3843.0], [261.0, 3825.0], [260.0, 3854.0], [286.0, 3571.0], [287.0, 3675.0], [285.0, 3721.0], [284.0, 3702.0], [283.0, 3745.0], [282.0, 3680.0], [281.0, 3660.0], [280.0, 3662.0], [279.0, 3649.0], [273.0, 3772.0], [272.0, 3790.0], [275.0, 3793.0], [274.0, 3776.0], [278.0, 3766.0], [277.0, 3775.0], [276.0, 3682.0], [302.0, 3642.0], [303.0, 3601.0], [301.0, 3547.0], [300.0, 3592.0], [299.0, 3554.0], [298.0, 3498.0], [297.0, 3506.0], [296.0, 3531.0], [295.0, 3506.0], [289.0, 3658.0], [288.0, 3700.0], [291.0, 3692.0], [290.0, 3684.0], [294.0, 3636.0], [293.0, 3572.0], [292.0, 3668.0], [318.0, 3546.0], [319.0, 3442.0], [317.0, 3501.0], [316.0, 3512.0], [315.0, 3516.0], [314.0, 3408.0], [313.0, 3553.0], [312.0, 3550.0], [311.0, 3583.0], [305.0, 3478.0], [304.0, 3595.0], [307.0, 3520.0], [306.0, 3514.0], [310.0, 3533.0], [309.0, 3530.0], [308.0, 3547.0], [334.0, 3360.0], [335.0, 3407.0], [333.0, 3393.0], [332.0, 3372.0], [331.0, 3449.0], [330.0, 3381.0], [329.0, 3386.0], [328.0, 3275.0], [327.0, 3503.0], [321.0, 3517.0], [320.0, 3537.0], [323.0, 3522.0], [322.0, 3466.0], [326.0, 3478.0], [325.0, 3502.0], [324.0, 3417.0], [350.0, 3273.0], [351.0, 3310.0], [349.0, 3273.0], [348.0, 3287.0], [347.0, 3337.0], [346.0, 3396.0], [345.0, 3346.0], [344.0, 3381.0], [343.0, 3336.0], [337.0, 3401.0], [336.0, 3428.0], [339.0, 3379.0], [338.0, 3338.0], [341.0, 3422.0], [340.0, 3327.0], [366.0, 3221.0], [367.0, 3278.0], [365.0, 3281.0], [364.0, 3284.0], [363.0, 3211.0], [362.0, 3281.0], [361.0, 3222.0], [360.0, 3329.0], [359.0, 3307.0], [352.0, 3130.0], [355.0, 3347.0], [354.0, 3301.5], [358.0, 3274.0], [357.0, 3338.0], [356.0, 3181.0], [382.0, 3142.0], [383.0, 3088.0], [381.0, 3149.0], [380.0, 3192.0], [379.0, 3140.5], [377.0, 3193.0], [376.0, 3232.0], [375.0, 2992.0], [369.0, 3217.0], [368.0, 3252.0], [371.0, 3214.0], [370.0, 3163.0], [374.0, 3242.0], [373.0, 3200.0], [372.0, 3179.0], [398.0, 3071.0], [399.0, 3097.0], [397.0, 3113.0], [396.0, 3124.0], [395.0, 3074.0], [394.0, 3123.0], [393.0, 3039.0], [392.0, 3133.0], [391.0, 3122.0], [385.0, 3156.0], [384.0, 2915.0], [387.0, 3160.0], [386.0, 3117.0], [390.0, 2997.0], [389.0, 3120.0], [388.0, 3062.0], [414.0, 2741.0], [415.0, 2922.0], [413.0, 3019.0], [412.0, 2924.0], [411.0, 2994.0], [410.0, 2993.0], [409.0, 3022.0], [408.0, 2859.0], [407.0, 2803.0], [401.0, 3030.0], [400.0, 2894.0], [403.0, 2970.0], [402.0, 3060.0], [406.0, 2944.0], [405.0, 2990.0], [404.0, 3056.0], [430.0, 2856.0], [431.0, 2867.0], [429.0, 2795.0], [428.0, 2901.0], [427.0, 2920.0], [426.0, 2893.0], [424.0, 2925.0], [423.0, 2897.0], [417.0, 2964.0], [416.0, 2982.0], [419.0, 2864.0], [418.0, 2935.0], [422.0, 2704.0], [421.0, 2861.0], [420.0, 2862.0], [446.0, 2715.0], [447.0, 2718.0], [445.0, 2776.0], [444.0, 2562.0], [443.0, 2814.0], [442.0, 2834.0], [441.0, 2743.0], [440.0, 2751.0], [439.0, 2556.0], [433.0, 2784.0], [432.0, 2835.0], [435.0, 2801.0], [434.0, 2876.0], [438.0, 2843.0], [437.0, 2844.0], [436.0, 2677.0], [462.0, 2504.0], [463.0, 2684.0], [461.0, 2727.0], [460.0, 2701.0], [459.0, 2705.0], [458.0, 2578.0], [457.0, 2706.5], [455.0, 2725.0], [449.0, 2732.0], [448.0, 2786.0], [451.0, 2769.0], [450.0, 2764.0], [454.0, 2754.0], [453.0, 2734.0], [452.0, 2773.0], [478.0, 2602.0], [479.0, 2604.0], [477.0, 2605.0], [476.0, 2571.0], [475.0, 2641.0], [474.0, 2439.0], [473.0, 2603.0], [472.0, 2574.0], [471.0, 2503.0], [465.0, 2415.0], [464.0, 2523.0], [467.0, 2579.0], [466.0, 2604.0], [469.0, 2657.0], [468.0, 2529.0], [494.0, 2318.0], [495.0, 2300.0], [493.0, 2496.0], [492.0, 2474.0], [491.0, 2272.0], [490.0, 2561.0], [489.0, 2495.5], [487.0, 2571.0], [481.0, 2486.0], [480.0, 2314.0], [483.0, 2600.0], [482.0, 2570.0], [486.0, 2495.0], [485.0, 2536.0], [484.0, 2531.0], [509.0, 2394.0], [511.0, 2305.0], [508.0, 2303.5], [499.0, 2446.0], [498.0, 2443.0], [497.0, 2445.0], [496.0, 2508.0], [506.0, 2421.0], [505.0, 2159.0], [504.0, 2453.0], [503.0, 2276.0], [502.0, 2474.0], [501.0, 2482.0], [500.0, 2214.0], [530.0, 2356.0], [539.0, 2294.5], [538.0, 2358.0], [536.0, 2366.0], [518.0, 2296.0], [516.0, 2157.0], [515.0, 2399.0], [514.0, 2412.0], [513.0, 2314.3333333333335], [535.0, 2326.5], [533.0, 2301.0], [532.0, 2243.5], [529.0, 2132.5], [527.0, 2353.5], [525.0, 2364.0], [524.0, 2401.0], [523.0, 2317.0], [522.0, 2416.0], [520.0, 2343.5], [570.0, 2221.0], [572.0, 2252.0], [569.0, 2216.0], [568.0, 2314.5], [566.0, 2273.0], [565.0, 2278.5], [563.0, 2332.0], [562.0, 2269.6666666666665], [559.0, 2257.0], [549.0, 2284.0], [550.0, 2312.5], [551.0, 2277.0], [558.0, 2296.0], [557.0, 2231.0], [555.0, 2380.0], [554.0, 2295.5], [552.0, 2259.0], [594.0, 2217.0], [604.0, 2201.0], [605.0, 2092.0], [593.0, 2080.0], [592.0, 2215.0], [603.0, 2208.0], [602.0, 2125.0], [600.0, 2116.0], [591.0, 2222.0], [590.0, 2190.0], [589.0, 2227.0], [588.0, 2229.0], [587.0, 2301.6666666666665], [586.0, 2247.5], [585.0, 2248.0], [584.0, 2254.5], [599.0, 2114.0], [596.0, 2171.0], [595.0, 2190.0], [627.0, 2115.0], [639.0, 2000.0], [637.0, 2018.5], [634.0, 2037.0], [633.0, 1995.5], [623.0, 2066.0], [609.0, 2153.0], [608.0, 2002.3333333333333], [613.0, 2103.0], [612.0, 2038.3333333333333], [615.0, 2132.0], [614.0, 1979.0], [621.0, 1920.0], [620.0, 2038.0], [619.0, 2108.6666666666665], [616.0, 2129.0], [631.0, 2077.0], [630.0, 1997.5], [628.0, 2080.5], [625.0, 2054.0], [624.0, 2086.0], [668.0, 1999.0], [671.0, 1945.3333333333333], [656.0, 2009.0], [658.0, 1912.0], [657.0, 1840.0], [667.0, 2001.0], [666.0, 1971.0], [665.0, 1976.0], [664.0, 1930.0], [655.0, 2010.5], [642.0, 2040.0], [640.0, 2081.0], [647.0, 2056.6666666666665], [643.0, 1879.0], [653.0, 1961.0], [652.0, 2027.3333333333333], [649.0, 2011.5], [651.0, 2032.0], [663.0, 1979.0], [662.0, 1879.0], [661.0, 1988.5], [659.0, 1990.0], [696.0, 1918.0], [701.0, 1922.0], [703.0, 1826.0], [688.0, 1800.0], [700.0, 1848.0], [699.0, 1887.5], [697.0, 1926.5], [687.0, 1921.0], [672.0, 1921.0], [674.0, 1784.0], [673.0, 1885.0], [677.0, 1983.0], [676.0, 1901.0], [686.0, 1884.0], [685.0, 1895.0], [684.0, 1873.0], [683.0, 1966.0], [682.0, 1954.5], [680.0, 1856.0], [694.0, 1921.0], [693.0, 1904.3333333333333], [690.0, 1879.0], [689.0, 1956.0], [732.0, 1772.0], [735.0, 1753.0], [721.0, 1894.0], [720.0, 1730.0], [723.0, 1808.0], [722.0, 1810.0], [734.0, 1731.0], [733.0, 1821.0], [731.0, 1848.0], [730.0, 1842.0], [729.0, 1758.0], [728.0, 1712.5], [719.0, 1619.0], [708.0, 1839.0], [707.0, 1868.5], [710.0, 1850.0], [709.0, 1836.0], [718.0, 1849.0], [715.0, 1919.0], [714.0, 1911.0], [713.0, 1722.0], [712.0, 1840.0], [726.0, 1848.0], [724.0, 1877.0], [760.0, 1628.0], [766.0, 1753.0], [767.0, 1719.0], [753.0, 1811.0], [752.0, 1785.0], [765.0, 1691.0], [764.0, 1685.3333333333333], [761.0, 1767.0], [751.0, 1816.0], [736.0, 1726.0], [738.0, 1801.0], [737.0, 1814.0], [741.0, 1805.0], [740.0, 1825.5], [750.0, 1781.0], [749.0, 1722.0], [748.0, 1746.0], [745.0, 1787.0], [744.0, 1785.3333333333333], [757.0, 1705.0], [756.0, 1764.0], [755.0, 1810.0], [754.0, 1811.0], [795.0, 1591.0], [787.0, 1714.0], [796.0, 1662.0], [784.0, 1533.0], [786.0, 1679.0], [785.0, 1703.0], [794.0, 1615.0], [793.0, 1661.0], [792.0, 1596.5], [775.0, 1653.0], [774.0, 1636.5], [772.0, 1755.0], [771.0, 1718.0], [783.0, 1705.0], [782.0, 1535.0], [781.0, 1634.0], [779.0, 1505.0], [778.0, 1585.0], [776.0, 1712.0], [790.0, 1604.0], [789.0, 1669.0], [788.0, 1671.0], [824.0, 1499.0], [830.0, 1549.0], [831.0, 1579.0], [829.0, 1481.0], [828.0, 1429.0], [826.0, 1558.5], [815.0, 1517.0], [800.0, 1647.0], [802.0, 1617.0], [801.0, 1616.0], [805.0, 1633.0], [804.0, 1546.5], [807.0, 1540.0], [806.0, 1394.0], [814.0, 1535.0], [812.0, 1386.5], [810.0, 1573.0], [809.0, 1540.5], [823.0, 1542.3333333333333], [820.0, 1607.0], [819.0, 1578.0], [816.0, 1575.0], [851.0, 1416.0], [863.0, 1455.6666666666667], [860.0, 1446.5], [859.0, 1423.5], [856.0, 1460.0], [845.0, 1351.0], [832.0, 1542.0], [834.0, 1381.0], [833.0, 1540.0], [837.0, 1487.0], [836.0, 1520.5], [842.0, 1487.0], [841.0, 1517.0], [840.0, 1449.3333333333333], [855.0, 1463.0], [854.0, 1461.5], [852.0, 1415.0], [850.0, 1420.4], [888.0, 1398.0], [893.0, 1382.0], [894.0, 1395.0], [892.0, 1361.0], [890.0, 1311.0], [889.0, 1253.0], [876.0, 1392.0], [864.0, 1381.0], [867.0, 1428.0], [866.0, 1461.0], [869.0, 1370.0], [868.0, 1442.0], [871.0, 1422.0], [870.0, 1355.0], [875.0, 1446.0], [874.0, 1339.0], [873.0, 1154.0], [887.0, 1293.0], [884.0, 1325.0], [883.0, 1382.6666666666667], [880.0, 1290.25], [921.0, 1068.0], [916.0, 1116.0], [924.0, 1073.0], [923.0, 1022.0], [922.0, 1065.0], [920.0, 1063.0], [903.0, 1226.0], [902.0, 1232.0], [901.0, 1119.0], [900.0, 1322.0], [899.0, 1313.0], [898.0, 1144.0], [897.0, 1362.0], [896.0, 1119.0], [911.0, 960.0], [910.0, 1138.0], [909.0, 1271.0], [908.0, 1239.0], [907.0, 1203.0], [906.0, 1297.0], [905.0, 1232.0], [904.0, 1223.0], [919.0, 1143.0], [918.0, 1102.0], [917.0, 1121.0], [914.0, 1168.0], [913.0, 1245.5], [953.0, 970.153846153846], [952.0, 905.0], [951.0, 997.0], [950.0, 1020.0], [949.0, 879.0], [948.0, 1004.0], [947.0, 868.8888888888889], [945.0, 1035.0], [939.0, 812.0], [1000.0, 483.70212765957444], [1.0, 5201.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[502.2569999999996, 2740.636]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3170.6666666666665, "minX": 1.73971248E12, "maxY": 15085.0, "series": [{"data": [[1.73971248E12, 15085.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73971248E12, 3170.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73971248E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2740.636, "minX": 1.73971248E12, "maxY": 2740.636, "series": [{"data": [[1.73971248E12, 2740.636]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73971248E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2159.677999999999, "minX": 1.73971248E12, "maxY": 2159.677999999999, "series": [{"data": [[1.73971248E12, 2159.677999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73971248E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 452.3740000000003, "minX": 1.73971248E12, "maxY": 452.3740000000003, "series": [{"data": [[1.73971248E12, 452.3740000000003]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73971248E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 749.0, "minX": 1.73971248E12, "maxY": 5268.0, "series": [{"data": [[1.73971248E12, 5268.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73971248E12, 4896.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73971248E12, 5208.43]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73971248E12, 5066.45]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73971248E12, 749.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73971248E12, 3419.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73971248E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 495.0, "minX": 47.0, "maxY": 4919.0, "series": [{"data": [[157.0, 1147.0], [331.0, 2201.0], [172.0, 3152.5], [180.0, 4081.5], [113.0, 4919.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[157.0, 1446.0], [331.0, 1981.0], [47.0, 495.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 331.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 47.0, "maxY": 4919.0, "series": [{"data": [[157.0, 1147.0], [331.0, 2201.0], [172.0, 3152.5], [180.0, 4081.5], [113.0, 4919.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[157.0, 0.0], [331.0, 0.0], [47.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 331.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.73971248E12, "maxY": 16.666666666666668, "series": [{"data": [[1.73971248E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73971248E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.7833333333333333, "minX": 1.73971248E12, "maxY": 10.933333333333334, "series": [{"data": [[1.73971248E12, 10.933333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.73971248E12, 0.7833333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.73971248E12, 4.95]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73971248E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.733333333333333, "minX": 1.73971248E12, "maxY": 10.933333333333334, "series": [{"data": [[1.73971248E12, 5.733333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.73971248E12, 10.933333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73971248E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.733333333333333, "minX": 1.73971248E12, "maxY": 10.933333333333334, "series": [{"data": [[1.73971248E12, 10.933333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.73971248E12, 5.733333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73971248E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

